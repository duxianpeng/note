<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:s="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:YuewenNote.Themes">
    <Style TargetType="Separator">
        <Setter Property="Height" Value="1"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border BorderBrush="{StaticResource BorderBrush}"
                BorderThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}"
                     TargetType="{x:Type MenuItem}">
        <Border Name="Border" BorderBrush="Transparent" BorderThickness="1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="32" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="32"/>
                </Grid.ColumnDefinitions>
                <Border Name="BorderIcon" BorderThickness="0" BorderBrush="Transparent">
                    <ContentPresenter Name="Icon" Margin="5,0,5,0" VerticalAlignment="Center" ContentSource="Icon" Visibility="Hidden"/>
                </Border>
                <Border Name="BorderChecked" CornerRadius="2" Background="Transparent" Margin="5,2,5,2" BorderBrush="Transparent" BorderThickness="0" Visibility="Hidden">
                    <Path Data="M0,0.86499024L25.80899,0.86499024 25.80899,2.4800104 22.119019,5.5149838 22.119019,4.5499874 3.6849976,4.5499874 3.6849976,22.973998 22.119019,22.973998 22.119019,15.100005 25.80899,10.679992 25.80899,26.664001 0,26.664001z M30.75,0L32,1.3299866 16.154999,20.333984 7.0599976,9.8489982 8.4850159,8.2949821 16.154999,12.003997z" Stretch="Uniform" Fill="#FF4472A2" Width="14" Height="14" Margin="0,0,0,0" RenderTransformOrigin="0.5,0.5">
                        <Path.RenderTransform>
                            <TransformGroup>
                                <TransformGroup.Children>
                                    <RotateTransform Angle="0" />
                                    <ScaleTransform ScaleX="1" ScaleY="1" />
                                </TransformGroup.Children>
                            </TransformGroup>
                        </Path.RenderTransform>
                    </Path>
                </Border>
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" Margin="5,0,55,0" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="10,2,2,2" VerticalAlignment="Center"/>
                <Popup x:Name="Popup"
                       Placement="Right"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       HorizontalOffset="-4" 
                       VerticalOffset="-2"
                       Focusable="False">
                    <Border x:Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            Background="{DynamicResource ControlBackgroundBrush}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource BorderBrush}">
                        <StackPanel IsItemsHost="True"/>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon"
                     Value="{x:Null}">
                <Setter TargetName="Icon"
                        Property="Visibility"
                        Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ControlBackgroundBrush}"/>
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ListAccentHighlightLowBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisableBackgroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate
        x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}"
        TargetType="MenuItem">
        <Grid>
            <Border Name="Border" BorderBrush="Transparent" BorderThickness="1">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="32" SharedSizeGroup="Icon"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                        <ColumnDefinition Width="32"/>
                    </Grid.ColumnDefinitions>
                    <Border Name="BorderIcon" BorderThickness="0" BorderBrush="Transparent">
                        <ContentPresenter Name="Icon" Margin="5,0,5,0" VerticalAlignment="Center" ContentSource="Icon" Visibility="Hidden"/>
                    </Border>
                    <Border Name="BorderChecked" CornerRadius="2" Background="Transparent" Margin="5,2,5,2" BorderBrush="Transparent" BorderThickness="0" Visibility="Hidden">
                        <Path Data="M0,0.86499024L25.80899,0.86499024 25.80899,2.4800104 22.119019,5.5149838 22.119019,4.5499874 3.6849976,4.5499874 3.6849976,22.973998 22.119019,22.973998 22.119019,15.100005 25.80899,10.679992 25.80899,26.664001 0,26.664001z M30.75,0L32,1.3299866 16.154999,20.333984 7.0599976,9.8489982 8.4850159,8.2949821 16.154999,12.003997z" Stretch="Uniform" Fill="#FF4472A2" Width="14" Height="14" Margin="0,0,0,0" RenderTransformOrigin="0.5,0.5">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <TransformGroup.Children>
                                        <RotateTransform Angle="0" />
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                    </TransformGroup.Children>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" Margin="5,0,55,0" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                    <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="10,2,2,2" VerticalAlignment="Center"/>
                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ControlBackgroundBrush}"/>
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ListAccentHighlightLowBrush}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="BorderChecked" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisableForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource WindowPrimaryTextBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>


    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}"
                     TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1" BorderBrush="Transparent">
            <Grid>
                <ContentPresenter Margin="6,3,6,3"
                                  ContentSource="Header"
                                  RecognizesAccessKey="True" />
                <Popup x:Name="Popup"
                       Placement="Bottom"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       Focusable="False">
                    <Border x:Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            Background="{DynamicResource ControlBackgroundBrush}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource BorderBrush}">
                        <StackPanel IsItemsHost="True"/>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted"
                     Value="true">
                <Setter TargetName="Border"
                        Property="BorderBrush"
                        Value="{DynamicResource BorderBrush}" />
                <Setter TargetName="Border"
                        Property="BorderThickness"
                        Value="1" />
                <Setter Property="Background"
                        TargetName="Border" Value="{DynamicResource ListAccentHighlightLowBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisableBackgroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{DynamicResource WindowPrimaryTextBrush}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role"
                     Value="SubmenuHeader">
                <Setter Property="Template"
                        Value="{DynamicResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{DynamicResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
    </Style>

    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                Background="{DynamicResource ControlBackgroundBrush}"
                BorderThickness="1"
                            BorderBrush="{DynamicResource BorderBrush}">
                        <StackPanel IsItemsHost="True"
                      KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate
        x:Key="ContextMenuItemTemplate"
        TargetType="MenuItem">
        <Grid>
            <Border Name="Border" BorderBrush="Transparent" BorderThickness="1">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="32" SharedSizeGroup="Icon"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Border Name="BorderIcon" BorderThickness="0" BorderBrush="Transparent">
                        <ContentPresenter Name="Icon" Margin="5,0,5,0" VerticalAlignment="Center" ContentSource="Icon" Visibility="Hidden"/>
                    </Border>
                    <Border Name="BorderChecked" CornerRadius="2" Background="Transparent" Margin="5,2,5,2" BorderBrush="Transparent" BorderThickness="0" Visibility="Hidden">
                        <Path Data="M0,0.86499024L25.80899,0.86499024 25.80899,2.4800104 22.119019,5.5149838 22.119019,4.5499874 3.6849976,4.5499874 3.6849976,22.973998 22.119019,22.973998 22.119019,15.100005 25.80899,10.679992 25.80899,26.664001 0,26.664001z M30.75,0L32,1.3299866 16.154999,20.333984 7.0599976,9.8489982 8.4850159,8.2949821 16.154999,12.003997z" Stretch="Uniform" Fill="#FF4472A2" Width="14" Height="14" Margin="0,0,0,0" RenderTransformOrigin="0.5,0.5">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <TransformGroup.Children>
                                        <RotateTransform Angle="0" />
                                        <ScaleTransform ScaleX="1" ScaleY="1" />
                                    </TransformGroup.Children>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" Margin="5,0,55,0" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ControlBackgroundBrush}"/>
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource ListAccentHighlightLowBrush}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="BorderChecked" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource DisableForegroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource WindowPrimaryTextBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>
    <Style x:Key="HeaderTreeItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Padding" Value="5"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Foreground" Value="{DynamicResource WindowPrimaryTextBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="TreeViewItem" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition
                                Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Border
                            BorderThickness="{TemplateBinding Border.BorderThickness}"
                            Padding="{TemplateBinding Control.Padding}"
                            BorderBrush="{TemplateBinding Border.BorderBrush}"
                            Background="{TemplateBinding Panel.Background}"
                            Name="Bd"
                            SnapsToDevicePixels="True">
                            <ContentPresenter
                                Grid.Column="1"
                                Content="{TemplateBinding HeaderedContentControl.Header}"
                                ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                ContentSource="Header"
                                Name="PART_Header"
                                HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter
                            Name="ItemsHost"
                            Grid.Row="1"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="IsExpanded" Value="True"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="{DynamicResource WindowPrimaryTextBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="TreeViewItem" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition
                                Height="auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Border
                            BorderThickness="{TemplateBinding Border.BorderThickness}"
                            Padding="{TemplateBinding Control.Padding}"
                            BorderBrush="{TemplateBinding Border.BorderBrush}"
                            Background="{TemplateBinding Panel.Background}"
                            Name="Bd"
                            SnapsToDevicePixels="True">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition
                                        Width="Auto"
                                        MinWidth="19" />
                                    <ColumnDefinition
                                        Width="Auto" />
                                    <ColumnDefinition
                                        Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton
                                    IsChecked="{Binding Path=IsExpanded,
                                    RelativeSource={RelativeSource TemplatedParent}}"
                                    ClickMode="Press"
                                    Name="Expander">
                                    <ToggleButton.Style>
                                        <Style
                                            TargetType="ToggleButton">
                                            <Style.Resources>
                                                <ResourceDictionary />
                                            </Style.Resources>
                                            <Setter
                                                Property="UIElement.Focusable">
                                                <Setter.Value>
                                                    <s:Boolean>False</s:Boolean>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter
                                                Property="FrameworkElement.Width">
                                                <Setter.Value>
                                                    <s:Double>16</s:Double>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter
                                                Property="FrameworkElement.Height">
                                                <Setter.Value>
                                                    <s:Double>16</s:Double>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter
                                                Property="Control.Template">
                                                <Setter.Value>
                                                    <ControlTemplate
                                                        TargetType="ToggleButton">
                                                        <Border Padding="3"
                                                                Background="Transparent"
                                                                BorderBrush="Transparent"   
                                                                Width="32"
                                                                Height="32">
                                                            <Path Name="ExpandPath" Data="M0,0L0,8L8,0z" Fill="{DynamicResource IconButtonForegroundBrush}">
                                                                <Path.RenderTransform>
                                                                    <RotateTransform
                                                                        Angle="135"
                                                                        CenterX="4"
                                                                        CenterY="4" />
                                                                </Path.RenderTransform>
                                                            </Path>
                                                        </Border>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger
                                                                Property="UIElement.IsMouseOver">
                                                                <Setter
                                                                    Property="Shape.Stroke"
                                                                    TargetName="ExpandPath">
                                                                    <Setter.Value>
                                                                        <DynamicResource ResourceKey="ListNormalHighlightTextBrush"/>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Setter
                                                                    Property="Shape.Fill"
                                                                    TargetName="ExpandPath">
                                                                    <Setter.Value>
                                                                        <DynamicResource ResourceKey="ListNormalHighlightTextBrush"/>
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Trigger.Value>
                                                                    <s:Boolean>True</s:Boolean>
                                                                </Trigger.Value>
                                                            </Trigger>
                                                            <Trigger
                                                                Property="ToggleButton.IsChecked">
                                                                <Setter
                                                                    Property="UIElement.RenderTransform"
                                                                    TargetName="ExpandPath">
                                                                    <Setter.Value>
                                                                        <RotateTransform
                                                                            Angle="180"
                                                                            CenterX="4"
                                                                            CenterY="4" />
                                                                    </Setter.Value>
                                                                </Setter>
                                                                <Trigger.Value>
                                                                    <s:Boolean>True</s:Boolean>
                                                                </Trigger.Value>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <ContentPresenter
                                    Grid.Column="1"
                                    Content="{TemplateBinding HeaderedContentControl.Header}"
                                    ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                    ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
                                    ContentSource="Header"
                                    Name="PART_Header"
                                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </Grid>
                        </Border>
                        <ItemsPresenter
                            Name="ItemsHost"
                            Margin="8 0 0 0"
                            Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger
                            Property="TreeViewItem.IsExpanded">
                            <Setter
                                Property="UIElement.Visibility"
                                TargetName="ItemsHost">
                                <Setter.Value>
                                    <x:Static
                                        Member="Visibility.Collapsed" />
                                </Setter.Value>
                            </Setter>
                            <Trigger.Value>
                                <s:Boolean>False</s:Boolean>
                            </Trigger.Value>
                        </Trigger>

                        <Trigger
                            Property="ItemsControl.HasItems">
                            <Setter
                                Property="UIElement.Visibility"
                                TargetName="Expander">
                                <Setter.Value>
                                    <x:Static
                                        Member="Visibility.Hidden" />
                                </Setter.Value>
                            </Setter>
                            <Trigger.Value>
                                <s:Boolean>False</s:Boolean>
                            </Trigger.Value>
                        </Trigger>
                        <Trigger
                            Property="TreeViewItem.IsSelected">
                            <Setter
                                Property="Panel.Background"
                                TargetName="Bd">
                                <Setter.Value>
                                    <DynamicResource
                                        ResourceKey="ListNormalHighlightBrush" />
                                </Setter.Value>
                            </Setter>
                            <Setter
                                Property="TextElement.Foreground">
                                <Setter.Value>
                                    <DynamicResource
                                        ResourceKey="ListNormalHighlightTextBrush" />
                                </Setter.Value>
                            </Setter>
                            <Trigger.Value>
                                <s:Boolean>True</s:Boolean>
                            </Trigger.Value>
                        </Trigger>
                        <Trigger
                            Property="UIElement.IsEnabled">
                            <Setter
                                Property="TextElement.Foreground">
                                <Setter.Value>
                                    <DynamicResource
                                        ResourceKey="ControlTextBrush" />
                                </Setter.Value>
                            </Setter>
                            <Trigger.Value>
                                <s:Boolean>False</s:Boolean>
                            </Trigger.Value>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource ButtonNormalTextBrush}"/>
        <Setter Property="Background" Value="{DynamicResource ButtonNormalBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Width" Value="100"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="1">
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonPressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource ButtonNormalTextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonMouseoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonPressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="{DynamicResource ButtonNormalTextBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonAlertMouseoverBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonAlertPressedBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Border x:Name="Border" BorderThickness="0" Background="{DynamicResource ControlBackgroundBrush}">
                        <ToolBarPanel x:Name="PART_ToolBarPanel"
                                      IsItemsHost="True"
                                      Margin="0,1,2,2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
    </Style>

    <Style x:Key="ToolBarButtonBaseStyle"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground"
                Value="{DynamicResource WindowSecondaryTextBrush}" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="Border" BorderThickness="0" Background="{DynamicResource ControlBackgroundBrush}">
                        <ContentPresenter 
                            x:Name="contentPresenter"
                            Margin="2"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource WindowPrimaryTextBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter  Property="Foreground"  Value="{DynamicResource WindowSecondaryTextBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}"
           BasedOn="{StaticResource ToolBarButtonBaseStyle}"
           TargetType="{x:Type Button}" />
    <Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}"
           BasedOn="{StaticResource ToolBarButtonBaseStyle}"
           TargetType="{x:Type ToggleButton}" />
    <Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}"
           BasedOn="{StaticResource ToolBarButtonBaseStyle}"
           TargetType="{x:Type CheckBox}" />
    <Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}"
           BasedOn="{StaticResource ToolBarButtonBaseStyle}"
           TargetType="{x:Type RadioButton}" />

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="Border"
                            Padding="2"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource BorderBrush}"
                            Background="{DynamicResource TextboxNormalBrush}"
                            CornerRadius="3">
                        <ScrollViewer Margin="0"
                                      x:Name="PART_ContentHost" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Path}">
        <Setter Property="StrokeThickness" Value="0.1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>


    <Style x:Key="MyListBoxItemStyle" 
           TargetType="ListBoxItem">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"></Setter>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate
                    TargetType="ListBoxItem">
                    <Border
                        BorderThickness="{TemplateBinding Border.BorderThickness}"
                        Padding="{TemplateBinding Control.Padding}"
                        BorderBrush="{TemplateBinding Border.BorderBrush}"
                        Background="{TemplateBinding Panel.Background}"
                        Name="Bd"
                        SnapsToDevicePixels="True">
                        <ContentPresenter
                            Content="{TemplateBinding ContentControl.Content}"
                            ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                            ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                            HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger
                            Property="IsSelected">
                            <Setter
                                Property="Panel.Background"
                                TargetName="Bd" Value="{DynamicResource ListAccentHighlightLowBrush}"/>
                            <Trigger.Value>
                                <s:Boolean>True</s:Boolean>
                            </Trigger.Value>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition
                                    Property="Selector.IsSelected">
                                    <Condition.Value>
                                        <s:Boolean>True</s:Boolean>
                                    </Condition.Value>
                                </Condition>
                                <Condition
                                    Property="Selector.IsSelectionActive">
                                    <Condition.Value>
                                        <s:Boolean>False</s:Boolean>
                                    </Condition.Value>
                                </Condition>
                            </MultiTrigger.Conditions>
                            <Setter
                                Property="Panel.Background"
                                TargetName="Bd" Value="{DynamicResource ListNormalHighlightBrush}"/>
                        </MultiTrigger>
                        <Trigger
                            Property="UIElement.IsEnabled">
                            <Setter
                                Property="TextElement.Foreground" Value="{DynamicResource DisableForegroundBrush}"/>
                            <Setter Property="Panel.Background" Value="{DynamicResource ListDisableHighlightBrush}"/>
                            <Trigger.Value>
                                <s:Boolean>False</s:Boolean>
                            </Trigger.Value>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>